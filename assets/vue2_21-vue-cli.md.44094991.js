import{_ as a,o as s,c as l,e}from"./chunks/framework.06699bc1.js";const n=JSON.parse('{"title":"Vue CLI","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. Vue CLI的了解","slug":"_1-vue-cli的了解","link":"#_1-vue-cli的了解","children":[]},{"level":3,"title":"2. 安装vue CLI","slug":"_2-安装vue-cli","link":"#_2-安装vue-cli","children":[]},{"level":3,"title":"3. 创建Vue CLI 2的项目","slug":"_3-创建vue-cli-2的项目","link":"#_3-创建vue-cli-2的项目","children":[]},{"level":3,"title":"4.  Vue CLI3","slug":"_4-vue-cli3","link":"#_4-vue-cli3","children":[]},{"level":3,"title":"5. CLI3 的配置","slug":"_5-cli3-的配置","link":"#_5-cli3-的配置","children":[]},{"level":3,"title":"6. 单文件组件测试","slug":"_6-单文件组件测试","link":"#_6-单文件组件测试","children":[]}],"relativePath":"vue2/21-vue-cli.md"}'),o={name:"vue2/21-vue-cli.md"},p=[e('<h1 id="vue-cli" tabindex="-1">Vue CLI <a class="header-anchor" href="#vue-cli" aria-label="Permalink to &quot;Vue CLI&quot;">​</a></h1><h4 id="前言-关于vue-cli版本介绍" tabindex="-1">前言:关于Vue CLI版本介绍 <a class="header-anchor" href="#前言-关于vue-cli版本介绍" aria-label="Permalink to &quot;前言:关于Vue CLI版本介绍&quot;">​</a></h4><blockquote><p>关于旧版本</p><p>Vue CLI 的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了旧版本的 <code>vue-cli</code> (1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。</p></blockquote><blockquote><p>Node 版本要求</p><p>Vue CLI 需要 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 8.9 或更高版本 (推荐 8.11.0+)。你可以使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noreferrer">nvm</a> 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noreferrer">nvm-windows</a> 在同一台电脑中管理多个 Node 版本。</p></blockquote><h3 id="_1-vue-cli的了解" tabindex="-1">1. Vue CLI的了解 <a class="header-anchor" href="#_1-vue-cli的了解" aria-label="Permalink to &quot;1. Vue CLI的了解&quot;">​</a></h3><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统.</p><br><h5 id="_1-1-vue-cli-说明" tabindex="-1">1.1 Vue CLI 说明 <a class="header-anchor" href="#_1-1-vue-cli-说明" aria-label="Permalink to &quot;1.1 Vue CLI 说明&quot;">​</a></h5><ol><li><p>CLI 全称就是 Command-Line Interface, 翻译为命令行界面,俗称脚手架</p></li><li><p>Vue CLI就是一个官网发布的vue.js项目的脚手</p></li><li><p>使用vue-cli可以帮我们快速的搭建Vue开发环境以及对应的webpack配置</p></li></ol><p>用现实生活中的例子:</p><p>比如你要盖一栋大楼,大楼外侧的脚手架是必须要搭建的, 每一栋大楼都需要这些脚手架,这些脚手架如果每一次都需要一点一点搭建的话就会非常繁琐和耗时,如果,有人提前帮你把这些必要的脚手架搭建好了,你只需要注重点关注在大楼建设上就可以了</p><p>同样的,我们开发vue项目,需要一些诸如webpack这样的配置,如果每次都学要自己从头处理就很繁琐,那么官方就帮我们把这些必要的配置好,生成了脚手架模板, 我们直接拿过来使用,这就是脚手架,在脚手架上直接搭建自己的项目,如果发现脚手架有些不能满足我们的需要,也可以自己手动修改脚手架配置</p><p>一言以蔽之: 脚手架就是项目基础模板</p><br><h5 id="_1-2-什么时候需要用到脚手架" tabindex="-1">1.2 什么时候需要用到脚手架 <a class="header-anchor" href="#_1-2-什么时候需要用到脚手架" aria-label="Permalink to &quot;1.2 什么时候需要用到脚手架&quot;">​</a></h5><p>如果你的项目比较简单,就是一些基本的将数据渲染到页面上,那么你不要Vue CLI脚手架</p><p>只有当你开发大型项目时,就必须要用到Vue CLI脚手架了</p><p>因为大型项目需要考虑代码目录结构,项目结构,部署以及热更新等很多琐碎的事情,那么这些事情都交给脚手架其他配置好, 我们直接使用脚手架就可以了</p><br><h3 id="_2-安装vue-cli" tabindex="-1">2. 安装vue CLI <a class="header-anchor" href="#_2-安装vue-cli" aria-label="Permalink to &quot;2. 安装vue CLI&quot;">​</a></h3><blockquote><p>注意在安装Vue CLI是一定要提前安装node.</p></blockquote><h5 id="_2-1-安装-vue-cli" tabindex="-1">2.1 安装 Vue CLi <a class="header-anchor" href="#_2-1-安装-vue-cli" aria-label="Permalink to &quot;2.1 安装 Vue CLi&quot;">​</a></h5><p>可以使用下列任一命令全局安装最新的CLI：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@vue/cli</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># or</span></span>\n<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@vue/cli</span></span></code></pre></div><p>安装之后，你就可以在命令行中访问 <code>vue</code> 命令。你可以通过简单运行 <code>vue</code>，看看是否展示出了一份所有可用命令的帮助信息，来验证它是否安装成功。</p><br><h5 id="_2-2-查看版本号命令" tabindex="-1">2.2 查看版本号命令 <a class="header-anchor" href="#_2-2-查看版本号命令" aria-label="Permalink to &quot;2.2 查看版本号命令&quot;">​</a></h5><p>使用下面命令打印版本号.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span></code></pre></div><p>如果可以正常打印版本号说明vue CLI 脚手架安装成功,</p><p>同时我们也可以关注版本号来确定是不是你所需要的版本号</p><p>最新的vue CLI版本已经是4.3.1了</p><br><h5 id="_2-3-使用cli项目模板" tabindex="-1">2.3 使用CLI项目模板 <a class="header-anchor" href="#_2-3-使用cli项目模板" aria-label="Permalink to &quot;2.3 使用CLI项目模板&quot;">​</a></h5><p>注意Vue CLI 3.X 和4.X的脚手架的模板和Vue CLI2.X 完全不同,</p><p>如果你还想使用Vue CLI2.X的脚手架模板,就需要参考官网给出的处理方案</p><p>官网关于使用 2.X 模板的方法</p><p>至此Vue CLI的安装就已经完成了, 那么接下来就让我们好好看看CLI2.X的项目模板和CLI3.X项目模板</p><br><h3 id="_3-创建vue-cli-2的项目" tabindex="-1">3. 创建Vue CLI 2的项目 <a class="header-anchor" href="#_3-创建vue-cli-2的项目" aria-label="Permalink to &quot;3. 创建Vue CLI 2的项目&quot;">​</a></h3><h5 id="_3-1-初始化化vue-cli2项目" tabindex="-1">3.1 初始化化Vue CLI2项目 <a class="header-anchor" href="#_3-1-初始化化vue-cli2项目" aria-label="Permalink to &quot;3.1 初始化化Vue CLI2项目&quot;">​</a></h5><p>使用下面的命令初始化vue CLI2的项目</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myvue</span></span></code></pre></div><p>初始化项目cli2项目图</p><br><h5 id="_3-2-运行项目" tabindex="-1">3.2 运行项目 <a class="header-anchor" href="#_3-2-运行项目" aria-label="Permalink to &quot;3.2 运行项目&quot;">​</a></h5><p>通过上面命令创建项目成功以后,</p><p>进入到项目里,然后通过<code>npm run dev</code>运行项目</p><p>其实在初始化Vue CLI2项目成功以后也会给我们对应的提示</p><p>安装成功后提示:</p><p>因此我们可以通过命令运行我们下载的模板项目</p><p>编译成功以后,会提示:你的项目运行在<code>http://localhost:8080</code>地址</p><p>这样我们就可以在浏览器地址栏输入地址运行项目</p><br><h5 id="_3-3-项目目录" tabindex="-1">3.3 项目目录 <a class="header-anchor" href="#_3-3-项目目录" aria-label="Permalink to &quot;3.3 项目目录&quot;">​</a></h5><p>项目已经成功启动,那么接下来我们就来好好看看项目模板的目录结构</p><br><br><h3 id="_4-vue-cli3" tabindex="-1">4. Vue CLI3 <a class="header-anchor" href="#_4-vue-cli3" aria-label="Permalink to &quot;4.  Vue CLI3&quot;">​</a></h3><h5 id="_4-1-cli3-和-cli2-版本的区别" tabindex="-1">4.1 CLI3 和 CLI2 版本的区别 <a class="header-anchor" href="#_4-1-cli3-和-cli2-版本的区别" aria-label="Permalink to &quot;4.1 CLI3 和 CLI2 版本的区别&quot;">​</a></h5><ol><li>cli3 是基于webpack4开发的,cli2是还是基于webpack3开发的</li><li>cli3 的设计原则是&#39;0配置&#39;,移除了根目录下build和config的webpack 配置文件目录</li><li>cli3 提供了<code>vue ui</code>命令,提供可视化配置,更加人性化</li><li>移出了static 文件夹,增加了 public文件夹,并且将index.html移动到public目录中</li></ol><br><h5 id="_4-2-cli3的安装命令" tabindex="-1">4.2 CLI3的安装命令 <a class="header-anchor" href="#_4-2-cli3的安装命令" aria-label="Permalink to &quot;4.2 CLI3的安装命令&quot;">​</a></h5><p>通过下面的命令初始化Vue CLI3的工程项目</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myproject</span></span></code></pre></div><br><h5 id="_4-3-cli3初始化项目中的配置介绍" tabindex="-1">4.3 CLI3初始化项目中的配置介绍 <a class="header-anchor" href="#_4-3-cli3初始化项目中的配置介绍" aria-label="Permalink to &quot;4.3 CLI3初始化项目中的配置介绍&quot;">​</a></h5><h6 id="_4-3-1-选择配置方式" tabindex="-1">4.3.1 选择配置方式 <a class="header-anchor" href="#_4-3-1-选择配置方式" aria-label="Permalink to &quot;4.3.1 选择配置方式&quot;">​</a></h6><p>可以使用默认的配置,也可以自己配置需要安装的内容</p><p>自己配置后还可以保存,下次在初始化项目时就可以使用上一次配置</p><br><h6 id="_4-3-2-自定义配置" tabindex="-1">4.3.2 自定义配置 <a class="header-anchor" href="#_4-3-2-自定义配置" aria-label="Permalink to &quot;4.3.2 自定义配置&quot;">​</a></h6><p>自定义配置项目,选择自己要安装的配置来初始化项目</p><br><h6 id="_4-3-3-配置保存选择" tabindex="-1">4.3.3 配置保存选择 <a class="header-anchor" href="#_4-3-3-配置保存选择" aria-label="Permalink to &quot;4.3.3 配置保存选择&quot;">​</a></h6><p>配置选择完毕后,会询问你是将配置单独生成文件,还是追加到package.json 文件中</p><p>建议使用单独配置文件,这样会比较方便修改配置</p><br><h6 id="_4-3-4-是否保存配置" tabindex="-1">4.3.4 是否保存配置 <a class="header-anchor" href="#_4-3-4-是否保存配置" aria-label="Permalink to &quot;4.3.4 是否保存配置&quot;">​</a></h6><p>是否将本次初始化项目的配置保存起来,以便下次初始化项目时直接使用</p><br><h6 id="_4-3-5-给保存的配置命名" tabindex="-1">4.3.5 给保存的配置命名 <a class="header-anchor" href="#_4-3-5-给保存的配置命名" aria-label="Permalink to &quot;4.3.5 给保存的配置命名&quot;">​</a></h6><p>如果选择保存本次配置,就给配置命名</p><br><h6 id="_4-3-6-初始化完成" tabindex="-1">4.3.6 初始化完成 <a class="header-anchor" href="#_4-3-6-初始化完成" aria-label="Permalink to &quot;4.3.6 初始化完成&quot;">​</a></h6><p>当项目配置初始化完毕后,提示你进入项目,并且告知启动项目的终端命令</p><br><h6 id="_4-3-7-有保存配置的初始化项目" tabindex="-1">4.3.7 有保存配置的初始化项目 <a class="header-anchor" href="#_4-3-7-有保存配置的初始化项目" aria-label="Permalink to &quot;4.3.7 有保存配置的初始化项目&quot;">​</a></h6><p>如果之前有保存过配置,那么在你初始化项目的时候,就会让你自己选择,</p><p>可以使用默认配置,或者自定义配置,也可以使用上一次保存的自定义配置</p><br><h6 id="_4-3-8-项目重名" tabindex="-1">4.3.8 项目重名 <a class="header-anchor" href="#_4-3-8-项目重名" aria-label="Permalink to &quot;4.3.8 项目重名&quot;">​</a></h6><p>项目重名就会提示,</p><p>有三种选择: 覆盖原来的项目, 与原理的项目合并,或者取消本次初始化项目</p><br><h6 id="_4-3-9-启动项目" tabindex="-1">4.3.9 启动项目 <a class="header-anchor" href="#_4-3-9-启动项目" aria-label="Permalink to &quot;4.3.9 启动项目&quot;">​</a></h6><p>通过<code>yarn serve</code>命令启动项目</p><br><h5 id="_4-4-cli3工程项目目录" tabindex="-1">4.4 CLI3工程项目目录 <a class="header-anchor" href="#_4-4-cli3工程项目目录" aria-label="Permalink to &quot;4.4 CLI3工程项目目录&quot;">​</a></h5><p>我们会发现CLI3的项目目录中看不到webpack的配置</p><br><h3 id="_5-cli3-的配置" tabindex="-1">5. CLI3 的配置 <a class="header-anchor" href="#_5-cli3-的配置" aria-label="Permalink to &quot;5. CLI3 的配置&quot;">​</a></h3><p>默认在CLI3的项目目录中是看不到配置文件的,那么有的时候我们需要修改配置文件怎么办呢,</p><p>接下来就看看如何修改配置</p><br><h5 id="_5-1-通过可视化界面修改配置" tabindex="-1">5.1 通过可视化界面修改配置 <a class="header-anchor" href="#_5-1-通过可视化界面修改配置" aria-label="Permalink to &quot;5.1 通过可视化界面修改配置&quot;">​</a></h5><p>CLI3中提供了一个可视化操作,终端命令为<code>vue ui</code></p><p>启动可视化操作界面</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ui</span></span></code></pre></div><p>在可视化界面中找到配置,</p><br><h5 id="_5-2-在项目中修改配置" tabindex="-1">5.2 在项目中修改配置 <a class="header-anchor" href="#_5-2-在项目中修改配置" aria-label="Permalink to &quot;5.2 在项目中修改配置&quot;">​</a></h5><p>在根文件下创建<code>vue.config.js</code>文件, 就可以在这个文件中定义需要修改的配置</p><p>cli3会自动将<code>vue.config.js</code>文件中的配置和默认的配置进行合并</p><br><p>例如:配置示例:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">baseUrl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//根路径</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">outputDir </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">， </span><span style="color:#676E95;font-style:italic;">//构建输出目录 ，在npm run build 打包生成的文件夹的名字</span></span>\n<span class="line"><span style="color:#A6ACCD;">    assetsDir: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">assets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//静态资源目录（js,css,img）</span></span>\n<span class="line"><span style="color:#A6ACCD;">    lintOnSave ： false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 是否开启eslint保存检测，true | false | error  默认使用false 不打开</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \t</span><span style="color:#F07178;">open</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// npm run server 运行时是否自动在浏览器中打开</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \t</span><span style="color:#F07178;">host</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">localehost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">，  </span><span style="color:#676E95;font-style:italic;">//主机名字</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \tprot: </span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//端口号 默认时8080</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \t</span><span style="color:#F07178;">https</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">， </span><span style="color:#676E95;font-style:italic;">//是否启用https协议，最好不使用 默认使用http协议</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \thotOnly: </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//热更新，就用false</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#89DDFF;">    \t</span><span style="color:#676E95;font-style:italic;">//重点时这里跨域</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \t</span><span style="color:#F07178;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">\t\t\t\t</span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:5000/api/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \t\t\t</span><span style="color:#F07178;">ws</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \t\t\t</span><span style="color:#F07178;">changOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    \t\t\t</span><span style="color:#F07178;">pathRewrite</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>\n<span class="line"><span style="color:#A6ACCD;">\t\t\t\t\t</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">^/api</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">\t\t\t\t</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">        \t</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">\t\t</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">，</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//before 在所有的其他中间件之前，提供自定义中间件功能，这可以用来配置自定义处理程序</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">before</span><span style="color:#A6ACCD;">(app) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">            app.get(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">/api/goods</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">(req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">res) =&gt; {</span></span>\n<span class="line"><span style="color:#A6ACCD;">                res.json(goods);</span></span>\n<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">\t</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span></span>\n<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><br><h3 id="_6-单文件组件测试" tabindex="-1">6. 单文件组件测试 <a class="header-anchor" href="#_6-单文件组件测试" aria-label="Permalink to &quot;6. 单文件组件测试&quot;">​</a></h3><p>我们可以通过一个全局的包对于一些特定的<code>.vue</code>文件(也就是单文件组件)进行单独的测试</p><h5 id="_6-1-安装全局的cli-service" tabindex="-1">6.1 安装全局的cli-service <a class="header-anchor" href="#_6-1-安装全局的cli-service" aria-label="Permalink to &quot;6.1 安装全局的cli-service&quot;">​</a></h5><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@vue/cli-service-global</span></span></code></pre></div><h5 id="_6-2-独立运行vue文件" tabindex="-1">6.2.独立运行vue文件 <a class="header-anchor" href="#_6-2-独立运行vue文件" aria-label="Permalink to &quot;6.2.独立运行vue文件&quot;">​</a></h5><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//vue serve vue文件</span></span>\n<span class="line"><span style="color:#A6ACCD;">vue serve hello</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue</span></span></code></pre></div><p>这样就可以单独测试某些组件了</p>',125)];const t=a(o,[["render",function(a,e,n,o,t,c){return s(),l("div",null,p)}]]);export{n as __pageData,t as default};
